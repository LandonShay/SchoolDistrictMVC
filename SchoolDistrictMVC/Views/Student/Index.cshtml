@model IEnumerable<SchoolDistrictMVC.Models.Student.StudentListItem>

@{ ViewBag.Title = "Index"; }

<h2>Students</h2>

@if (TempData.ContainsKey("SaveResult"))
{
<div class="alert alert-success fade in" role="alert">
    <button type="button" class="close" data-dismiss="alert">
        <span>&times;</span>
    </button>
    @TempData["SaveResult"]
</div>}

<div class="createButton row">
    <div class="col-lg-2">
        <button type="button" class="btn btn-primary" onclick="location.href='@Url.Action("Create", "Student")'">Create New Student</button>
    </div>
    <div class="sortButton col-lg-8">
        <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu2" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
            Sort By
            <span class="caret"></span>
        </button>
        <ul class="dropdown-menu" aria-labelledby="dropdownMenu2">
            <li>@Html.ActionLink("Id", "Index", new { sortOrder = ViewBag.IDSort })</li>
            <li>@Html.ActionLink("Name", "Index", new { sortOrder = ViewBag.NameSort })</li>
            <li>@Html.ActionLink("Date of Birth", "Index", new { sortOrder = ViewBag.DateSort })</li>
            <li>@Html.ActionLink("School", "Index", new { sortOrder = ViewBag.SchoolSort })</li>
        </ul>
    </div>
    <div class="col-lg-2">
        @for (int i = 1; i <= ViewBag.PageCount; i++)
        {
            <a class="page-link" href="@Url.Action("Index", new { page = i })">@i</a>
        }
    </div>
</div>


<div class="table-responsive">
    <table class="table table-striped table-hover">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Id)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.DateOfBirth)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.School)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Grade)
            </th>
            <th></th>
        </tr>

        @foreach (var item in Model)
        {
<tr>
    <td>
        @Html.DisplayFor(modelItem => item.Id)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.Name)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.DateOfBirth)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.School)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.Grade)
    </td>
    <td>
        @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
        @Html.ActionLink("Details", "Details", new { id = item.Id }) |
        @Html.ActionLink("Delete", "Delete", new { id = item.Id })
    </td>
</tr>}

    </table>
</div>

<script>
    let userData = null;
    $.ajax({
        url: "http://dummy.restapiexample.com/api/v1/employees",
        type: "get",
        async: false,
        success: function (users) {
            userData = users.data;
        }
    });
    var currentPage = 0;
    let pages = "";
    let page_size = 5;
    pages = paginate(userData, page_size);
    pageLi = "";
    pages.forEach((element, index) => {
        if (index != 0)
            pageLi += '<li onclick="pageChange(' + index + ')" id="page_' + index + '" class="page-item list-item" id="page_' + index + '"><a class="page-link" href="javascript:void(0)">' + index + '</a></li>';
    });
    $(".page-list").after(pageLi);
    page = pages[currentPage];
    printRows(page);

    function nextPage() {
        if (pages.length - 1 > currentPage)
            page = currentPage + 1;
        pageChange(page);
    }

    function prePage() {
        if (currentPage < pages.length && currentPage != 0)
            page = currentPage - 1;
        pageChange(page);
    }

    function pageChange(page) {
        currentPage = page;
        $(".list-item").removeClass("active");
        $("#page_" + page).addClass("active");
        $(".page-data").html("");
        page = pages[page];
        printRows(page);
    }

    function printRows(arr) {
        arr.forEach(element => {
            $(".page-data").append("<tr><td>" + element.id + "</td><td>" + element.Name + "</td><td>" + element.DateOfBirth + "</td><td>" + element.School + "</td></tr>" + element.Grade + "</td><td>");

        });
    }

    function paginate(arr, size) {
        return arr.reduce((acc, val, i) => {
            let idx = Math.floor(i / size)
            let page = acc[idx] || (acc[idx] = [])
            page.push(val)
            return acc
        }, [])
    }
</script>
